Output for: test1.txt
0  Token: Keyword                              Lexeme: function
0  Token: Identifier                           Lexeme: convert1x
0  Token: Seperator                            Lexeme: (
0  Token: Identifier                           Lexeme: fahr
0  Token: Keyword                              Lexeme: integer
0  Token: Seperator                            Lexeme: )
1  Token: Seperator                            Lexeme: {
2  Token: Keyword                              Lexeme: ret
2  Token: Integer                              Lexeme: 5
2  Token: Operator                             Lexeme: *
2  Token: Seperator                            Lexeme: (
2  Token: Identifier                           Lexeme: fahr
2  Token: Operator                             Lexeme: -
2  Token: Integer                              Lexeme: 32
2  Token: Seperator                            Lexeme: )
2  Token: Operator                             Lexeme: /
2  Token: Integer                              Lexeme: 9
2  Token: Seperator                            Lexeme: ;
3  Token: Seperator                            Lexeme: }
4  Token: Seperator                            Lexeme: #
5  Token: Keyword                              Lexeme: integer
5  Token: Identifier                           Lexeme: low
5  Token: Seperator                            Lexeme: ,
5  Token: Identifier                           Lexeme: high
5  Token: Seperator                            Lexeme: ,
5  Token: Identifier                           Lexeme: step
5  Token: Seperator                            Lexeme: ;
6  Token: Keyword                              Lexeme: get
6  Token: Seperator                            Lexeme: (
6  Token: Identifier                           Lexeme: low
6  Token: Seperator                            Lexeme: ,
6  Token: Identifier                           Lexeme: high
6  Token: Seperator                            Lexeme: ,
6  Token: Identifier                           Lexeme: step
6  Token: Seperator                            Lexeme: )
6  Token: Seperator                            Lexeme: ;
7  Token: Keyword                              Lexeme: while
7  Token: Seperator                            Lexeme: (
7  Token: Identifier                           Lexeme: low
7  Token: Operator                             Lexeme: <=
7  Token: Identifier                           Lexeme: high
7  Token: Seperator                            Lexeme: )
8  Token: Seperator                            Lexeme: {
8  Token: Keyword                              Lexeme: put
8  Token: Seperator                            Lexeme: (
8  Token: Identifier                           Lexeme: low
8  Token: Seperator                            Lexeme: )
8  Token: Seperator                            Lexeme: ;
9  Token: Keyword                              Lexeme: put
9  Token: Seperator                            Lexeme: (
9  Token: Identifier                           Lexeme: convert1x
9  Token: Seperator                            Lexeme: (
9  Token: Identifier                           Lexeme: low
9  Token: Seperator                            Lexeme: )
9  Token: Seperator                            Lexeme: )
9  Token: Seperator                            Lexeme: ;
10 Token: Identifier                           Lexeme: low
10 Token: Operator                             Lexeme: =
10 Token: Identifier                           Lexeme: low
10 Token: Operator                             Lexeme: +
10 Token: Identifier                           Lexeme: step
10 Token: Seperator                            Lexeme: ;
11 Token: Seperator                            Lexeme: }
12 Token: Seperator                            Lexeme: #
12 Token: Seperator                            Lexeme: #

